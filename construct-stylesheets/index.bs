<pre class=metadata>
Title: Constructable Stylesheet Objects
Shortname: construct-stylesheets
Level: 1
Status: DREAM
ED: http://tabatkins.github.io/specs/construct-stylesheets/
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact/
Abstract: This draft defines additions to CSSOM to make StyleSheet objects directly constructable, along with methods and APIs to make it easier to deal with stylesheets in the context of custom elements and similar.  It also defines constructors for CSSRule objects.
Ignored Terms: ShadowRoot, create a medialist object, add a css style sheet, document css style sheets
</pre>

<pre class='link-defaults'>
spec:dom-core-ls; type:interface; text:Document
</pre>

Adding Stylesheets In Script {#adding-stylesheets}
=================================

<pre class='idl'>
[Constructor(DOMString text, CSSStyleSheetInit? options)]
partial interface CSSStyleSheet {
};

dictionary CSSStyleSheetInit {
	(MediaList or DOMString) media = "";
	DOMString title = "";
	boolean alternate = false;
	boolean disabled = false;
};

interface TreeScope {
	void addStyleSheet(CSSStyleSheet sheet);
};
Document implements TreeScope;
ShadowRoot implements TreeScope;
</pre>

<dl>
	<dt><dfn constructor for=CSSStyleSheet lt="CSSStyleSheet(text)|CSSStyleSheet(text, options)">CSSStyleSheet(text, options)</dfn>
	<dd>
		When called, execute these steps:

		1. Construct a new {{CSSStyleSheet}} object <var>sheet</var>,
			with location set to <code>null</code>,
			no parent CSS style sheet,
			no owner node,
			no owner CSS rule,
			and a title set to the {{CSSStyleSheetInit/title}} attribute of <var>options</var>.
			Set <var>sheet’s</var> origin-clean flag.
		2. If the {{CSSStyleSheetInit/media}} attribute of <var>options</var> is a string,
			<a>create a MediaList object</a> from the string
			and assign it as <var>sheet’s</var> media.
			Otherwise, assign the value of the attribute as <var>sheet’s</var> media.
		3. If the {{CSSStyleSheetInit/alternate}} attribute of <var>options</var> is true,
			set <var>sheet’s</var> alternate flag.
		4. If the {{CSSStyleSheetInit/disabled}} attribute of <var>options</var> is true,
			set <var>sheet’s</var> disabled flag.
		5. <a spec=css-syntax-3>Parse a stylesheet</a> from <var>text</var>.
			If it returned a list of rules,
			and assign the list as <var>sheet’s</var> CSS rules;
			otherwise,
			set <var>sheet’s</var> CSS rules to an empty list.
		6. Return <var>sheet</var>.

	<dt><dfn method for=TreeScope>addStyleSheet(sheet)</dfn>
	<dd>
		When called, <a>add a CSS style sheet</a> to the {{TreeScope}} this method was called on.

		Style sheets added to to the document by this method
		are placed at the end of the {{TreeScope}}’s <a>document CSS style sheets</a>,
		after all stylesheets that come from the document's markup,
		in addition order.
</dl>

Applying Styles At All Levels {#styles-at-all-levels}
===================

<div class='issue'>
	One of the major "misuses" of the ''/deep/'' combinator
	is to apply "default styles" to a component wherever it lives in the tree,
	no matter how deeply nested it is inside of components.
	This is similar to the job of the user-agent style sheet,
	but it's supplied by the page author,
	because it's for custom elements.

	Unfortunately, this is extremely slow,
	and there's not a whole lot that can be done about that--
	''/deep/'' combinators are slow by their nature.
	Note, though, that the UA and user stylesheets automatically apply in all shadows;
	it's only the author stylesheet that is limited to the context it's created in.

	One possible solution here is to add another origin,
	the "author default" origin,
	which sits between "user" and "author",
	and applies in all shadow roots automatically.
	We can add a list for these stylesheets,
	akin to <code class='lang-javascript'>document.styleSheets</code>,
	and allow you to insert constructed stylesheets into it.

	Maybe it only applies to the context you're in and descendant contexts?
	Need to investigate;
	probably bad to let a component apply automatic styles to the outer page via this mechanism.
</div>
