<h1>CSS Aliases</h1>
<pre class='metadata'>
Shortname: css-aliases
Level: 1
Status: ED
ED: http://tabatkins.github.io/specs/css-aliases/
Editor: Tab Atkins, Google, http://xanthir.com/contact/
Abstract: This specification defines methods of defining “aliases” for long or commonly-used values in several CSS features, reducing repetition in the stylesheet.
</pre>

<h2 id='intro'>
Introduction</h2>

	When authoring CSS,
	one often encounters significant repetition in certain features.
	For example, a given media query might be repeated in several places,
	or a selector meant to apply to all heading elements
	requires specifying '':matches(h1, h2, h3, h4, h5, h6)'' in every location that uses it.

	This repetition makes stylesheets more verbose and difficult to read,
	and also affects maintenance,
	as the author has to keep each repetition in sync when making any changes.

	This specification defines aliasing methods for several CSS features--
	media queries and selectors--
	so that a long or repeatedly-used value can be given a short, memorable name instead.
	This makes stylesheets easier to read,
	and allows authors to maintain only a single copy of the value,
	so changes are automatically propagated to each use.

	Note: The features in this specification are thematically similar to <a>custom properties</a> and <a>variables</a>,
	but use a different, simpler definition and use syntax.

<h2 id='custom-mq'>
Custom Media Queries</h2>

	A <dfn>custom media query</dfn> is defined with the ''@custom-media'' rule:

	<pre class='prod'><dfn>@custom-media</dfn> = @custom-media <<custom-name>> <<media-query>> ;</pre>

	Where <dfn>&lt;custom-name></dfn> is a <<custom-ident>> with at least one <code>_</code> (underscore, U+005F LOW LINE) in it.

	This defines that the <a>custom media query</a> named by the <<custom-name>> represents the given <<media-query>>.

	Note: It's recommended that the name either starts with the underscore,
	following the somewhat similar notation in JavaScript, Python, and other computer languages,
	or that the underscore is used as a separator between a simple "namespace" and the actual name of the <a>custom media query</a>,
	such as ''jq_small-screen''.
	Either of these methods makes the underscore fairly visually obvious in its use,
	preventing accidental confusion with CSS-defined <a>media queries</a>.

	The <<custom-name>> can then be used in a <a>media feature</a>.
	It <strong>must</strong> be used in a <a>boolean context</a>;
	using them in a normal or <a>range context</a> is a syntax error.
	The <a>custom media query</a> evaluates to true if the <<media-query>> it represents evaluates to true,
	and false otherwise.

	<div class='example'>
		For example, if a responsive site uses a particular breakpoint in several places,
		it can alias that with a reasonable name:

		<pre>
			@custom-media _narrow-window (max-width: 30em);

			@media (_narrow-window) {
				/* narrow window styles */
			}
			@media (_narrow-window) and (script) {
				/* special styles for when script is allowed */
			}
			/* etc */
		</pre>
	</div>

<h3 id='script-custom-mq'>
Script-based Custom Media Queries</h3>

	<div class='issue'>
		Define a map of names to values for JS.
		Values can be either a MediaQueryList object or a boolean,
		in which case it's treated identically to the above,
		or can be a number or a string,
		in which case it's treated like a normal MQ,
		and can use the normal or range context syntax.
		Like:

		<pre>
			&lt;script>
			CSS.customMedia.set('_foo', 5);
			&lt;/script>
			&lt;style>
			@media (_foo: 5) { ... }
			@media (_foo < 10) { ... }
			&lt;/style>
		</pre>
	</div>


<h3 id='custom-mq-cssom'>
CSSOM</h3>

	<p class='issue'>
		Fill in.

<h2 id='custom-selectors'>
Custom Selectors</h2>

	A <dfn>custom selector</dfn> is defined with the ''@custom-selector'' rule:

	<pre class='prod'><dfn>@custom-selector</dfn> = @custom-selector <<custom-name>> <<selector>> ;</pre>

	This defines a <a>custom selector</a> which is written as a <a spec=selectors>pseudo-class</a> with the given <<custom-name>>,
	and represents a '':matches()'' selector using the provided <<selector>> as its argument.

	Similar to <a>custom media queries</a>,
	the name of a <a>custom selector</a> must contain an underscore character.

	<div class='example'>
		For example, if an author wanted to easily refer to all heading elements in their HTML document,
		they could create an alias:

		<pre>
			@custom-selector :_heading h1, h2, h3, h4, h5, h6;

			:_heading { /* styles for all headings */ }
			:_heading + p { /* more styles */ }
			/* etc */
		</pre>
	</div>

<h3 id='script-custom-selectors'>
Script-based Custom Selectors</h3>

	<div class='issue'>
		This one's more complicated than MQs.
		Brian Kardell came up with a good proposal for evaluating selectors as JS functions that return a boolean,
		which had decent performance characteristics by specifying the qualities of the element it was based on
		(which determined when it would be called).

		<pre>
		&lt;script>
		CSS.customSelector.set("_foo",
			                   {"predicate": function(el){...},
			                   	"matches": "a"});
		&lt;/script>
		</pre>

		"matches" is an optional selector specifying what subset of elements the custom selector is valid for.
		The selector is automatically false for elements that don't match,
		and the predicate isn't called.

		By default, the predicate is called whenever there's a mutation in an element that matches the "matches" selector,
		or one of its descendants.

		You should be able to suppress the auto-calling,
		and be able to trigger the predicate to run manually.
		That way you can use mutation listeners manually to only call the predicate when necessary.

		We should probably offer some sugar for filtering the list of mutations that trigger the predicate to be called.
		Maybe just a list of attributes that you'll be caring about?  And/or tagnames?

		Maybe let the pseudo-class also accept an argument,
		and pass it (as a serialized string) as a second argument to the predicate.
		'':_foo'' would pass <code>null</code>,
		while '':_foo()'' would pass <code>""</code>.
	</div>

<h3 id='custom-selectors-cssom'>
CSSOM</h3>

	<p class='issue'>
		Fill in.

<h2 id='custom-functions'>
Custom Functions</h2>

	<div class='issue'>
		Interesting possibilities here.
		Definitely need some way to define custom functions in CSS.
		This would, for example, let people define whatever color function they want,
		such as implementing the <a href="http://www.boronine.com/husl/">HUSL</a> color space.

		Definitely need a JS interface.
		What options are needed?

		Call time/frequency:

		<ul>
			<li>
				Default should probably treat the function as a preprocessor,
				calling the JS function once per instance in the stylesheet
				and substituting in the returned value.

			<li>
				Should probably have an option to allow calling per element/instance combo, too.
				Gets called more as match results change.
		</ul>

		We can take some cues from my thoughts on a random() function.
		It needs per-instance,
		per-element&amp;instance,
		and per "identifier", so you can reuse the same value in multiple spots.
		That last one can probably be handled manually by the JS,
		so we don't have to privilege a particular argument as an identifier.

		We'd need to provide the context in which it's used.
		Which property, for example.
		Should we allow them to be used in other places,
		or should we just define more contextual locations as we go?
		That is, should we allow custom-defined functions in @supports with this API,
		or should we add a <code>.customSupports</code> map?
		I suspect that individual cases will have their own useful contextual information,
		so it's better to specialize each instance of custom functions.

		How much can we do in pure CSS?
		Being able to substitute values depending on MQs or support queries would be useful.
		To get *real* use out of it, though, I suspect we'd need fuller support for conditionals,
		likely in the form of SASS's ''@if'' or something similar.
	</div>

<h2 id='custom-combinators'>
Custom Selector Combinators</h2>

	<div class='issue'>
		Selectors are made of two pieces:
		simple selectors,
		and combinators.
		We should allow custom combinators too.

		This is JS-only, because it's transforming elements, not filtering them,
		and you can't express any useful transformations in pure CSS.

		You provide a function which,
		when given an element,
		produces a list of zero or more elements.

		For examples, with ''div /--foo/ span'',
		the CSS engine will match the first part of the selector
		and find all the div elements.
		It passes that list to the function registered for the --foo combinator,
		and expects to get a new list of elements returned.
		It then continues on its way,
		filtering that list to include only span elements, etc.

		A child combinator would be something like:

		<pre>
		CSS.customCombinator.set("--child", function(el) {
				return el.children;
			});
		</pre>

		Then ''div /--child/ span'' would be identical to ''div > span''.

		If we generalize a selector with a custom combinator to ''A /--custom/ B'',
		then the UA would automatically call the --custom function
		whenever new elements match ''A''.
		If elements stop matching ''A'',
		it won't bother;
		it'll just drop them from the result.

		Alternately, the function could take a list of elements
		(all the elements matching ''A'')
		and return a new list of elements.
		This would be a bit more complicated for the author,
		but would allow more variety in the types of combinators that could be defined,
		as you could define things that depend on the entire set of matched elements.
		For example, you could define ''A /nth 1/ B''
		to give only the first element from the set of ''A'' matches.

		(Maybe we allow both variants,
		since the per-element one is easier to optimize and program against,
		but the per-set one allows some useful stuff.)

		Similarly to custom pseudo-classes,
		we'd allow arguments,
		with them parsed eagerly per-instance
		and passed to the combinator function.

		If we do the per-element combinator function,
		we could potentially cache the results,
		so that it never needs to be called again for the same element.
		Possibly have a flag that turns off this behavior,
		so that you're guaranteed to be called again.
	</div>

<h2 id='custom-atrules'>
Custom At-Rules</h2>

	<div class='issue'>
		This one's even less developed,
		but it would be interesting to allow custom at-rules as well.
		It's definitely pure-JS as well.

		Unsure exactly what's best here.
		Possibly register a callback per rule,
		which is called with the prelude/contents of the at-rule?

		Should we do the callback approach,
		or just maintain a list of custom at-rules
		and let scripts parse them themselves?
		Unfortunately, the latter means we'd have to have a special mechanism to alert scripts
		when new at-rules get added or removed.

		For a lot of these at-rules, we may want a way to know when they're "applied"--
		when, according to the built-in at-rules like @media and @supports,
		the rule would be applied.
	</div>
